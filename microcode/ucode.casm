
// 
// bit 11-15: LD_R, LD_M, LD_B, LD_A, LD_PC               -- Load Register, Load Memory, Load Buffer, Load AR
// bit    10: ~INC                                        -- Assert Increment Line
// bit     9: ALU_SEL#0 ( SEL MOV )
// bit     8: ALU_SEL#1 ( SEL ADD )
// bit     7: Y_SEL ( USE Y INSTEAD OF R )
// bit     6: PC_SEL ( USE PC INSTEAD OF R IN OUTPUT )
// bit   4-5: OE_BUS_D                                     -- OE Data Bus( 0: R, 1: B, 2: ALU, 3: DI )
// bit     3: OE_BUS_R                                     -- OE Result Bus ( 0: ALU_0, 1: ALU_1 )
// bit     2: WR_MEM                                       -- Write Mem
// bit     1: FETCH
// bit     0: ISSUE                                        -- Issue Next Instruction From Prefetch

.enum UFLAGS {
    LD,
    INC,
    ALU
}

.enum LFLAGS {
    REG,
    CDB,
    CRB,
    WM,
    FETCH,
    ISSUE
}

.enum ALU_VALUES {
    any,
    add,
    mov,
    null_1
}

.enum ALT_REGS {
    any,
    pc,
    iy,
    null_2
}

.opcode ucode_byte_high LD=ld_gr,ld_mo,ld_mi,ld_ar,ld_pc INC=inc_val ALU=alu_v -> {
    .db (ld_gr << 7) + (ld_mo << 6) + (ld_mi << 5) + (ld_ar << 4) + (ld_pc << 3) + ((!inc_val) << 2) + alu_v;
}

.opcode ucode_byte_low REG=r CDB=#cdb_v CRB=#crb_v WM=w FETCH=_if ISSUE=_is -> {
    .db (r << 6) + (cdb_v << 4) + (crb_v << 3) + ( w << 2 ) + ( _if << 1 ) + _is;
}

.opcode padding -> {
    .db ( 0 );
    .db ( 0 );
}