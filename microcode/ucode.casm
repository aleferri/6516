
// MSB -> LSB
// bit   0-3= LD_GR LD_DR LD_AR LD_PF
// bit     4= FORCE_ALU (0= ALLOW, 1= FORCE)
// bit     5= 0
// bit     6= 0
// bit     7= Y_SEL
// bit   8-9= OE_BUS (0= R, 1= DR, 2= ALU_B, 3= ALU_U)
// bit    10= MASK_R# (0= ALLOW, 1= FORCE_PC)
// bit    11= BR_MASK_CC
// bit    12= ISSUE_NEXT_OP
// bit    13= WRITE_MEM
// bit 14-15= 0

.enum FLAGS {
    LD,
    ALU,
    NEXT,
    ISSUE,
    OUT_PC,
    BR,
    WR
}

.opcode ucode_uw LD=ld_gr,ld_dr,ld_ar,ld_pf ALU=force,y_sel -> {
    .db (ld_gr << 7) + (ld_dr << 6) + (ld_ar << 5) + (ld_pf << 4) + (force << 3) + y_sel;
}

.opcode ucode_lw #BUS OUT_PC=force_pc BR=disable NEXT=go_next ISSUE=issue_next WR=write -> {
    .db (BUS << 6) + (force_pc << 5) + (disable << 4) + ( go_next << 3 ) + ( write << 2 ) + ( issue_next << 1 );
}

.opcode padding -> {
    .db ( 0 );
    .db ( 0 );
}