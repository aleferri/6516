
.set Regs {
    L;
    A;
    X;
    Y;
}

.set BinaryOps {
    OP_ADD;
    OP_TAD;
    OP_SUB;
    OP_CMP;
    OP_AND;
    OP_IOR;
    OP_EOR;
    OP_MOV;
}

.set UnaryOps {
    OP_ICY;
    OP_BSW;
    OP_ASL;
    OP_LSL;
}

.num 16 "0x" ""
.num 2 "0b" ""

.inline ALU_OPCODE_IM
.with ( r : Regs, op : BinaryOps ) -> {
    .return 0b00000000 + ( r << 3 ) + op;
}

.inline ALU_OPCODE_ZP
.with ( r : Regs, op : BinaryOps ) -> {
    .return 0b00100000 + ( r << 3 ) + op;
}

.inline ALU_OPCODE_RU
.with ( r : Regs, op : UnaryOps ) -> {
    .return 0b10100000 + ( r << 3 ) + op;
}

.opcode DWI {{ imm16 }}
.with ( imm16 : Ints ) -> {
    .outr [ imm16 >> 9, ( imm16 >> 1 ) & 255 ];
}

.opcode LD {{ r, #imm8 }}
.with ( r : Regs, imm8 : Ints ) -> {
    .if imm8 > 255 {
        .error imm8, "Cannot embed 8+ bits of address inside the instruction, use LH + LD instead";
    }
    .outr [ .expr ALU_OPCODE_IM( r, OP_MOV ), imm8 ];
}

.opcode LH {{ r, #imm8 }}
.with ( r : Regs, imm8 : Ints ) -> {
    .outr [ .expr ALU_OPCODE_RU( r, OP_BSW ), 0, .expr ALU_OPCODE_IM( r, OP_MOV ), imm8 ];
}

.opcode LD {{ r, zp8 }}
.with ( r : Regs, zp8 : Ints ) -> {
    .if zp8 > 511 {
        .error zp8, "Zero page is restricted to the first 256 words";
    }
    .outr [ .expr ALU_OPCODE_ZP( r, OP_MOV ), zp8 >> 1 ];
}

.opcode LD {{ r, ( y, offset ) }}
.with ( r : Regs, y : Regs, offset : Ints ) -> {
    .if offset > 255 {
        .error addr8, "Offset must be less than 256";
    }
    .outr [ 0b10000000 + ( r << 3 ) + y, offset ];
}

.opcode ST {{ r, zp8 }}
.with ( r : Regs, zp8 : Ints ) -> {
    .if zp8 > 511 {
        .error addr8, "Zero page is restricted to the first 256 words";
    }
    .outr [ 0b11100000 + ( r << 3 ), zp8 >> 1 ];
}

.opcode ST {{ r, ( y, offset ) }}
.with ( r : Regs, y : Regs, offset : Ints ) -> {
    .if offset > 255 {
        .error addr8, "Zero page is restricted to the first 256 words";
    }
    .outr [ 0b11000000 + ( r << 3 ) + y, offset ];
}

.opcode BEQ {{ r, addr16 }}
.with ( r : Regs, addr16 : Ints ) -> {
    .if ( addr16 - .addr ) > 128 || ( addr16 - .addr ) < -126 {
        .error addr8, "Cannot branch outside the -126,128 address range";
    }
    .outr [ 0b01000000 + ( r << 3 ), ( addr16 - .addr - 2 ) / 2 ];
}

.opcode BNE {{ r, addr16 }}
.with ( r : Regs, addr16 : Ints ) -> {
    .if ( addr16 - .addr ) > 128 || ( addr16 - .addr ) < -126 {
        .error addr8, "Cannot branch outside the -126,128 address range";
    }
    .outr [ 0b01000100 + ( r << 3 ), ( addr16 - .addr - 2 ) / 2 ];
}

.opcode BRA {{ addr16 }}
.with ( addr16 : Ints ) -> {
    .if ( addr16 - .addr ) > 128 || ( addr16 - .addr ) < -126 {
        .error addr8, "Cannot branch outside the -126,128 address range";
    }
    .outr [ 0b01000010, ( addr16 - .addr - 2 ) / 2 ];
}

// Unary ALU
.opcode ICY {{ r }}
.with ( r : Regs ) -> {
    .outr [ .expr ALU_OPCODE_RU( r, OP_ICY ), 0 ];
}

.opcode ASL {{ r }}
.with ( r : Regs ) -> {
    .outr [ .expr ALU_OPCODE_RU( r, OP_ASL ), 0 ];
}

.opcode LSR {{ r }}
.with ( r : Regs ) -> {
    .outr [ .expr ALU_OPCODE_RU( r, OP_LSR ), 0 ];
}

// Binary ALU IMM
.opcode ADD {{ r, #imm8 }}
.with ( r : Regs, imm8 : Ints ) -> {
    .if imm8 > 255 {
        .error addr8, "Cannot embed 8+ bits of address inside the instruction";
    }
    .outr [ .expr ALU_OPCODE_IM( r, OP_ADD ), imm8 ];
}

.opcode SUB {{ r, #imm8 }}
.with ( r : Regs, imm8 : Ints ) -> {
    .if imm8 > 255 {
        .error addr8, "Cannot embed 8+ bits of address inside the instruction";
    }
    .outr [ .expr ALU_OPCODE_IM( r, OP_SUB ), imm8 ];
}

.opcode CMP {{ r, #imm8 }}
.with ( r : Regs, imm8 : Ints ) -> {
    .if imm8 > 255 {
        .error addr8, "Cannot embed 8+ bits of address inside the instruction";
    }
    .outr [ .expr ALU_OPCODE_IM( r, OP_CMP ), imm8 ];
}

.opcode AND {{ r, #imm8 }}
.with ( r : Regs, imm8 : Ints ) -> {
    .if imm8 > 255 {
        .error addr8, "Cannot embed 8+ bits of address inside the instruction";
    }
    .outr [ .expr ALU_OPCODE_IM( r, OP_AND ), imm8 ];
}

.opcode ORA {{ r, #imm8 }}
.with ( r : Regs, imm8 : Ints ) -> {
    .if imm8 > 255 {
        .error addr8, "Cannot embed 8+ bits of address inside the instruction";
    }
    .outr [ .expr ALU_OPCODE_IM( r, OP_IOR ), imm8 ];
}

.opcode EOR {{ r, #imm8 }}
.with ( r : Regs, imm8 : Ints ) -> {
    .if imm8 > 255 {
        .error addr8, "Cannot embed 8+ bits of address inside the instruction";
    }
    .outr [ .expr ALU_OPCODE_IM( r, OP_EOR ), imm8 ];
}

// Binary ALU IMM
.opcode ADD {{ r, zp8 }}
.with ( r : Regs, zp8 : Ints ) -> {
    .if zp8 > 511 {
        .error addr8, "ZeroPage is limited to the first 256 locations of memory";
    }
    .outr [ .expr ALU_OPCODE_ZP( r, OP_ADD ), zp8 >> 1 ];
}

.opcode SUB {{ r, zp8 }}
.with ( r : Regs, zp8 : Ints ) -> {
    .if zp8 > 511 {
        .error addr8, "ZeroPage is limited to the first 256 locations of memory";
    }
    .outr [ .expr ALU_OPCODE_ZP( r, OP_SUB ), zp8 >> 1 ];
}

.opcode CMP {{ r, zp8 }}
.with ( r : Regs, zp8 : Ints ) -> {
    .if zp8 > 511 {
        .error addr8, "ZeroPage is limited to the first 256 locations of memory";
    }
    .outr [ .expr ALU_OPCODE_ZP( r, OP_CMP ), zp8 >> 1 ];
}

.opcode AND {{ r, zp8 }}
.with ( r : Regs, zp8 : Ints ) -> {
    .if zp8 > 511 {
        .error addr8, "ZeroPage is limited to the first 256 locations of memory";
    }
    .outr [ .expr ALU_OPCODE_ZP( r, OP_AND ), zp8 >> 1 ];
}

.opcode ORA {{ r, zp8 }}
.with ( r : Regs, zp8 : Ints ) -> {
    .if zp8 > 511 {
        .error addr8, "ZeroPage is limited to the first 256 locations of memory";
    }
    .outr [ .expr ALU_OPCODE_ZP( r, OP_IOR ), zp8 >> 1 ];
}

.opcode EOR {{ r, zp8 }}
.with ( r : Regs, zp8 : Ints ) -> {
    .if zp8 > 511 {
        .error addr8, "ZeroPage is limited to the first 256 locations of memory";
    }
    .outr [ .expr ALU_OPCODE_ZP( r, OP_EOR ), zp8 >> 1 ];
}


.opcode CALL {{ addr16 }}
.with (addr16 : Ints) -> {
    // LH L, high(addr16)
    // BSW L
    // JMP L, low(addr16)
    .out [ addr16 >> 9, .expr ALU_OPCODE_IM( 3, OP_MOV ), 0, .expr ALU_OPCODE_RU( 3, OP_BSW ), ( addr16 >> 1 ) & 255, 0b01100011 ];
}

.opcode RET {{ }}
.with () -> {
    // JMP ( L + 1 )
    .outr [ 0b01100000, -1 ];
}