
6516v2 Revision A

ISA

-- Register Set

16 bit register L
16 bit register A
16 bit register X
16 bit register Y

-- Instruction Format

000 rr fff i8      //alu #i8
001 rr fff z8      //alu zp8	ZP -> R
010 rr cad a8      //branch on Z(R) = C to PC + { sign_ext(d), offset8 }
011 rr xyy a8      //jump to Y + disp8, L = PC
100 rr 0yy a8      //ld.r Y, address8
101 rr 0ff z8      //op R
110 rr 0yy a8      //st.r Y, address8
111 rr 000 z8      //st.r zp8

Legend:
    
    - i8: Immediate 8 bit
    - z8: Zero Page, address from 0x0000 to 0x00FF (16 bit words)
    - a8: Displacement 8 bit positive from one register or implied PC

ALU_0 encoding bits (fff): 
    - 000 ADD   A + B, 
    - 001 TAD   carry_out(A + B + CY) with CY set to 0, 
    - 010 SUB   A + ~B + CY, with CY set to 1, 
    - 011 CMP   carry_out(A + ~B + CY) with CY set to 1, 
    - 100 AND   A & B, 
    - 101 OR    A | B, 
    - 110 EOR   A ^ B, 
    - 111 MOV   B
    
ALU_1 encoding (ff):
    - 00 ICY
    - 01 BSW ( Byte Swap )
    - 10 ASL Arithmetic Shift Left, 
    - 11 LSR Logical Shift Right
    
-- Performance (to be revised, pending reimplementation)

PERFORMANCE:
ALU_IM8:    BEST 1, WORST: 1
ALU_URY:    BEST 1, WORST: 1
ALU_ZP8:    BEST 3, WORST: 3
BRANCH:     BEST 1, WORST: 4
JUMP:       BEST 4, WORST: 4
LOAD:       BEST 3, WORST: 3
STORE:      BEST 4, WORST: 4

-- Internals (to be revised)

CONTROL_COMMANDS:
    FETCH, ISSUE

000:
    DI -> ALU_B ; REG[@R] -> ALU_A ; ALU -> REG[@R] ; PC ++ -> PC ; PC ++ -> AR ; FETCH ; ISSUE
    
001:
    DI -> AR ;      // 1
    MEM -> B ; PC ++ -> PC, AR
    REG[@R] -> ALU_A ; B -> ALU_B ; ALU -> REG[@R] ; FETCH ; ISSUE
    
010:
    ISZ_CLR( FETCH, ISSUE ) ; BUS[@R] ; PC ++ -> AR, PC ; FETCH ; ISSUE
    PC + DI -> PC, AR ; RELOAD
    FETCH ; PC ++ -> PC, AR;
    FETCH ; ISSUE ;
    
011:
    PC -> R ;
    REG[@Y] + DI -> PC, AR ;
    FETCH ; PC ++ -> PC, AR ;
    FETCH ; ISSUE
    
100:
    REG[@Y] + DI -> AR ;            // 1
    PC ++ -> AR, PC ; MEM -> B
    B -> REG[@R] ; FETCH ; ISSUE

101:
    REG[@R] -> REG[@R] ; PC ++ -> PC, AR ; FETCH ; ISSUE
    
110:
    REG[@Y] + DI -> AR          // 1
    REG[@R] -> MEM_D ;
    WRITE ; PC ++ -> AR, PC
    FETCH ; ISSUE
    
111:
    DI -> AR                    // 1
    REG[@R] -> MEM_D ;
    WRITE ; PC ++ -> AR, PC
    FETCH ; ISSUE
    
Microcode Signals:
bit 11-15: LD_R, LD_M, LD_B, LD_A, LD_PC               -- Load Register, Load Memory, Load Buffer, Load AR
bit    10: ~INC                                        -- Assert Increment Line
bit     9: ALU_SEL#0 ( SEL ADD )
bit     8: ALU_SEL#1 ( SEL MOV )
bit     7: Y_SEL ( USE Y INSTEAD OF R )
bit     6: PC_SEL ( USE PC INSTEAD OF R IN OUTPUT )
bit   4-5: OE_BUS_D                                     -- OE Data Bus( 0: R, 1: B, 2: ALU, 3: DI )
bit     3: OE_BUS_R                                     -- OE Result Bus ( 0: ALU_0, 1: ALU_1 )
bit     2: WR_MEM                                       -- Write Mem
bit     1: FETCH
bit     0: ISSUE                                        -- Issue Next Instruction From Prefetch
                     

-- Boot Process:
    Read Address at 0x0000
    Jump to the specified address
    Start Microcode Loop
    
Example program:

@100
LD Y, #70       0001 1111 0100 1010     1F46
LD X, #0        0001 0111 0000 0000     1700
SUB X, #255     0001 0010 1111 1111     12FF
LD A, (Y, 0)    1000 1011 0000 0000     8B00
ST A, (X, 4)    1100 1010 0000 0100     CA04
LD A, (Y, 1)    1000 1011 0000 0001     8B01
ST A, (X, 5)    1100 1010 0000 0101     CA05
LD A, (Y, 2)    1000 1011 0000 0010     8B02
ST A, (X, 6)    1100 1010 0000 0110     CA06
LD A, (Y, 3)    1000 1011 0000 0011     8B03
ST A, (X, 7)    1100 1010 0000 0111     CA07